//YELP CAMP
var express          = require("express"),
    app              = express(),
    bodyParser       = require("body-parser"),
    mongoose         = require("mongoose"),
    passport         = require("passport"),
    LocalStrategy    = require("passport-local"),
    Campground       = require("./models/campground.js"),
    Comment          = require("./models/comment"), 
    User             = require("./models/user"),                
    // passportLocalMongoose    = require("passport-local-mongoose"),
    seedDB           = require("./seeds.js");
    
    
    
app.use(bodyParser.urlencoded({extended: true}));
app.set('view engine', 'ejs');
mongoose.Promise = global.Promise;
mongoose.connect("mongodb://localhost/yelp_camp");
app.use(express.static(__dirname + "/public"));
seedDB();

app.use(require("express-session")({
    secret: "Rusty is a critter",
    resave: false,
    saveUninitialized: false
}));
app.use(passport.initialize());
app.use(passport.session());
passport.use(new LocalStrategy(User.authenticate()));
passport.serializeUser(User.serializeUser());
passport.deserializeUser(User.deserializeUser());


app.use(function(req, res, next){
   res.locals.currentUser = req.user;
   next();
});


// var campgroundSchema = new mongoose.Schema({
//     name: String,
//     image: String,
//     description: String
// });


// var Campground = mongoose.model("Campground", campgroundSchema);



    // Campground.create(
    //     {
    //         name: "Granite Hill",
    //         image: "https://farm7.staticflickr.com/6057/6234565071_4d20668bbd.jpg",
    //         description: "Big ass granite hill"
    //     },
    //     function(err, newlyCreated) {
    //     if(err) {
    //         console.log(err);
    //     } else
    //         console.log("Campground created");
    // });

app.set("view engine", "ejs");

app.get("/", function(req, res){
    res.render("landing");
});


// var campgrounds = [
//         {name: "Granite Hill", image: "https://farm1.staticflickr.com/60/215827008_6489cd30c3.jpg"},
//         {name: "Mountain Goat's Rest", image: "https://farm7.staticflickr.com/6057/6234565071_4d20668bbd.jpg"},
//         {name: "Salmon Creek", image: "https://farm9.staticflickr.com/8442/7962474612_bf2baf67c0.jpg"},
//         {name: "Granite Hill", image: "https://farm1.staticflickr.com/60/215827008_6489cd30c3.jpg"},
//         {name: "Mountain Goat's Rest", image: "https://farm7.staticflickr.com/6057/6234565071_4d20668bbd.jpg"},
//         {name: "Salmon Creek", image: "https://farm9.staticflickr.com/8442/7962474612_bf2baf67c0.jpg"},
//         {name: "Granite Hill", image: "https://farm1.staticflickr.com/60/215827008_6489cd30c3.jpg"},
//         {name: "Mountain Goat's Rest", image: "https://farm7.staticflickr.com/6057/6234565071_4d20668bbd.jpg"}
// ];
app.get("/campgrounds", function(req, res){
    Campground.find({}, function(err, allCampgrounds) {
        if(err) {
            console.log(err);
        } else
             res.render("campgrounds/index", {campgrounds:allCampgrounds});
    });
});

app.get("/campgrounds/new", function(req, res){
    res.render("campgrounds/new");
});

app.post("/campgrounds",isLoggedIn, function(req, res){
    var name = req.body.name;
    var image = req.body.image;
    var desc = req.body.description;
    var newCampground = {name: name, image: image, description: desc};
        Campground.create(newCampground, function(err, newlyCreated) {
        if(err) {
            console.log(err);
        } else
             res.redirect("/campgrounds");
    });

});

app.get("/campgrounds/:id", function(req, res){
    Campground.findById(req.params.id).populate("comments").exec(function(err, foundCampground) {
        if(err){
            console.log(err + "SHOW");
        } else {
            // console.log(foundCampground);
             res.render("campgrounds/show", {campground: foundCampground});
        }
    });
});

app.get("/campgrounds/:id/comments/new", function(req, res){
     Campground.findById(req.params.id, function(err, campground){
        if(err){
            console.log(err);
        } else {
             res.render("comments/new", {campground: campground});
        }
    });
});
  

app.post("/campgrounds/:id/comments",isLoggedIn, function(req, res){
    Campground.findById(req.params.id, function(err, campground) {
        if(err) {
            console.log(err);
            res.redirect("/campgrounds");
        } else {
            Comment.create(req.body.comment, function(err, comment) {
                if(err) {
                    console.log(err);
                } else {
                    campground.comments.push(comment);
                    campground.save();
                    res.redirect("/campgrounds/" + campground._id);
                }
            });
        }
    });
  
});

//AUTHENTICATION ROUTES

app.get("/register", function(req, res) {
    res.render("register");
});





app.post("/register",function(req, res) {
  var newUser = new User({username: req.body.username});
  User.register(newUser, req.body.password, function(err, user){
      if(err) {
          console.log(err);
          return res.render("register");
      } 
          console.log("auth try");
          passport.authenticate("local")(req, res, function(){
              if(err) {
                  console.log("auth error " + err);
              }
              console.log("redirect");
              res.redirect("/campgrounds");
          });
      });
  });
  
   function isLoggedIn(req, res, next) {
     if(req.isAuthenticated()){
         return next();
     }
        res.redirect("/login");
 }
  
  app.get("/login", function(req, res) {
    res.render("login");
});

 app.post("/login", passport.authenticate("local", {
     successRedirect: "/campgrounds",
     failureRedirect: "/login"
 }), function(req, res){
     
 });
 
 app.get("/logout", function(req, res) {
   req.logout();
   res.redirect("/campgrounds");
});
 
  function isLoggedIn(req, res, next) {
     if(req.isAuthenticated()){
         return next();
     }
        res.redirect("/login");
 }

app.listen(process.env.PORT, process.env.IP, function() {
    console.log("server has started");
});